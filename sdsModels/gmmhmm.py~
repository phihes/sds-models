from model import Model
import utils as util
import numpy as np
from sklearn.mixture import GMM
from sklearn.hmm import GMMHMM

class Gmmhmm(Model):

	''' A hidden Markov model with Gaussian mixture emissions '''
	
	name = "GMM-HMM"
	
	def _train(self, data):
	
		# parameters
		features = self.params['features']
		num_mixc = self.params['num_mixc']
		cov_type = self.params['cov_type']
		states = self.params['states']
				
		# train one GMM for each state
		mixes = list()
		for state in states:
			# select data with current state label
			d = data[data.rating == state]
			# prepare data shape
			d = np.array(zip(*[d[f].values for f in features]))

			# init GMM
			gmm = GMM(num_mixc, cov_type)
			# train
			gmm.fit(d)
			mixes.append(gmm)
		   

		# train HMM with init, trans, GMMs=mixes
#		init,trans = util.hmm_EstimateML_init_trans(data,states)
		
		init, trans = util.hmm_MLE(util.MatrixCounterNoEmissions,
											data, states, False, features)
		
		model = GMMHMM(n_components=len(states), init_params='', gmms=mixes)
		model.transmat_ = trans
		model.startprob_ = init

		return model
